# yaml(*.yml)
#     yet another markup language
#     가벼운 마크업 언어로 사용
#
# 기본 문법
#   # 는 주석
#   기본표현
#      key: value     <- : 다음에는 반드시 공백문자가 와야 함
#
#   key:
#       key_1:
#           key_2:
#               key_3:
#                   ..

spring:
  application:
    name: Bt63_JPA_Board

  # JPA 설정
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

    hibernate:
      # DDL(create, alter, drop) 정의시 DB의 고유 기능을 사용할 수 있다.
      # create: 서버 가동할때마다 기존 테이블을 삭제하고 새로 생성
      # update: DB테이블와 엔티티 매핑정보를 비교해서 변경사항이 있는 경우만 수정 (ALTER). 테이블 없으면 CREATE
      # create-drop: 기본적으로 create 와 동일한 동작을 하나, 종료시점에서 drop
      # none : production 환경으로 ★배포할때는 반드시 none 으로 하자.
      ddl-auto: update
      # 그 이후에 스키마 변경 내용 있을 때 alter 등을 사용해 추가한다.
      # ↓ Entity 를 작성한 그대로 물리적인 네이밍이 적용됨
#      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

  # Thymeleaf 설정
  thymeleaf:
    cache: false
    prefix: classpath:templates/views/

  # datasource 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/db326?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: user326
    password: 1234

  # security 설정
  security:
    #    user:
    #      name: user
    #      password: 1234
    oauth2:
      client:
        registration:
          google:   # registration 등록된 이름
            client-id: 54159939353-u207lsodneq39urtcuo2tngekmifmcgf.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
          facebook:
            client-id: 441301521979274  # 앱 아이디
            client-secret: 494f53c157f8b99e56aaedde79803ca8 # 앱 시크릿 코드
            scope:  # 접근권한
              - email
              - public_profile
          naver:
            client-id: IOVcsENbav7ACnUq946r
            client-secret: 4ZX5usgTeT
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code  # 코드 받고 인증하는 방식
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
        # provider 제공
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response   # scope 가 response 아래에 있음을 명시

app:
  #  페이징 관련 세팅값
  pagination:
    write_pages: 10  # 한 [페이징] 당 몇 개의 페이지를 표시?
    page_rows: 10   # 한 '페이지'에 몇 개의 글을 리스트화 표시?

  # 파일 업로드 경로
  upload:
    path: upload

  # OAuth2
  oauth2:

    password: 1234  #oauth2 인증한 회원에 대한 전용 패스워드, 보안주의!

    # Kakao 로그인 관련 세팅값
    kakao:
      client-id: 9d999732b5231e3c8a830caa9e401bc5 # REST Api 키
      redirect-uri: http://localhost:8080/oauth2/kakao/callback # Redirect URI
      token-uri: https://kauth.kakao.com/oauth/token # access token 요청 URI
      user-info-uri: https://kapi.kakao.com/v2/user/me  # 사용자 profile 요청 URI
